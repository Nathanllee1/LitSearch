{"ast":null,"code":"import _classCallCheck from \"/home/nathanlee/Workspace/Litsearch (Nathan Lee_s Project)/Litsearch/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/nathanlee/Workspace/Litsearch (Nathan Lee_s Project)/Litsearch/frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/nathanlee/Workspace/Litsearch (Nathan Lee_s Project)/Litsearch/frontend/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/nathanlee/Workspace/Litsearch (Nathan Lee_s Project)/Litsearch/frontend/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/nathanlee/Workspace/Litsearch (Nathan Lee_s Project)/Litsearch/frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/nathanlee/Workspace/Litsearch (Nathan Lee_s Project)/Litsearch/frontend/src/NewApp.jsx\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from \"react-redux\";\nimport LitSearchPage from \"./LitSearchPage\";\n\nvar NewApp =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(NewApp, _React$Component);\n\n  function NewApp() {\n    _classCallCheck(this, NewApp);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(NewApp).apply(this, arguments));\n  }\n\n  _createClass(NewApp, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(LitSearchPage, {\n        quotes: this.props.quotes,\n        dispatch: this.props.dispatch,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 11\n        },\n        __self: this\n      });\n    }\n  }]);\n\n  return NewApp;\n}(React.Component); // Here, we're defining what props we expect to receive from the store\n// We're getting dispatch for free from the middleware (see store.js and index.js)\n// As for the quotes object, that is being taken from `themedQuotes` via the map function below\n\n\nNewApp.propTypes = {\n  quotes: PropTypes.array.isRequired,\n  dispatch: PropTypes.func.isRequired\n}; // Here's the function we talked about which maps state from the store to props given to this component\n// We're basically extracting the store's stateful quotes so they can be passed down to components and rendered\n\nfunction mapStateToProps(state) {\n  return {\n    quotes: state.themedQuotes.quotes\n  };\n}\n\nexport default connect(mapStateToProps)(NewApp);","map":{"version":3,"sources":["/home/nathanlee/Workspace/Litsearch (Nathan Lee_s Project)/Litsearch/frontend/src/NewApp.jsx"],"names":["React","PropTypes","connect","LitSearchPage","NewApp","props","quotes","dispatch","Component","propTypes","array","isRequired","func","mapStateToProps","state","themedQuotes"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,OAAT,QAAwB,aAAxB;AAEA,OAAOC,aAAP,MAA0B,iBAA1B;;IAEMC,M;;;;;;;;;;;;;6BAEO;AACL,aACI,oBAAC,aAAD;AACI,QAAA,MAAM,EAAE,KAAKC,KAAL,CAAWC,MADvB;AAEI,QAAA,QAAQ,EAAE,KAAKD,KAAL,CAAWE,QAFzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ;AAMH;;;;EATgBP,KAAK,CAACQ,S,GAa3B;AACA;AACA;;;AACAJ,MAAM,CAACK,SAAP,GAAmB;AACfH,EAAAA,MAAM,EAAEL,SAAS,CAACS,KAAV,CAAgBC,UADT;AAEfJ,EAAAA,QAAQ,EAAEN,SAAS,CAACW,IAAV,CAAeD;AAFV,CAAnB,C,CAKA;AACA;;AACA,SAASE,eAAT,CAAyBC,KAAzB,EAAgC;AAC5B,SAAO;AACHR,IAAAA,MAAM,EAAEQ,KAAK,CAACC,YAAN,CAAmBT;AADxB,GAAP;AAGH;;AAED,eAAeJ,OAAO,CAACW,eAAD,CAAP,CAAyBT,MAAzB,CAAf","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types'\nimport { connect } from \"react-redux\";\n\nimport LitSearchPage from \"./LitSearchPage\";\n\nclass NewApp extends React.Component {\n\n    render() {\n        return (\n            <LitSearchPage\n                quotes={this.props.quotes}\n                dispatch={this.props.dispatch}\n            />\n        );\n    }\n\n}\n\n// Here, we're defining what props we expect to receive from the store\n// We're getting dispatch for free from the middleware (see store.js and index.js)\n// As for the quotes object, that is being taken from `themedQuotes` via the map function below\nNewApp.propTypes = {\n    quotes: PropTypes.array.isRequired,\n    dispatch: PropTypes.func.isRequired\n};\n\n// Here's the function we talked about which maps state from the store to props given to this component\n// We're basically extracting the store's stateful quotes so they can be passed down to components and rendered\nfunction mapStateToProps(state) {\n    return {\n        quotes: state.themedQuotes.quotes,\n    };\n}\n\nexport default connect(mapStateToProps)(NewApp)\n"]},"metadata":{},"sourceType":"module"}