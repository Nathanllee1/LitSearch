{"ast":null,"code":"import fetch from 'cross-fetch';\nimport { UPDATE_LIT_TEXT, RECEIVE_QUOTES } from './actionTypes'; // This updates the literature text in state\n// It can be called everytime the user changes their input\n\nexport var updateLitText = function updateLitText(text) {\n  return {\n    type: UPDATE_LIT_TEXT,\n    text: text\n  };\n}; // This is an internal function (not exported) called by `fetchQuotesByTheme`\n// It formats the input payload and actually makes the web request to the server\n\nfunction fetchQuotes(theme, text) {\n  // TODO: use a valid URL and JSON payload format\n  var url = 'http://127.0.0.1:5001/';\n  var payload = {\n    theme: theme,\n    text: text\n  };\n  console.info('Here is the payload being sent to the server:');\n  console.info(payload); // Return function which issues a POST web request\n  // The server's response is passed over to `receiveQuotes` below\n\n  return function (dispatch) {\n    return fetch(url, {\n      method: \"post\",\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(payload)\n    }).then(function (response) {\n      return response.json();\n    }).then(function (json) {\n      return dispatch(receiveQuotes(theme, json));\n    });\n  };\n} // This is the function called when the user clicks on a theme\n\n\nexport function fetchQuotesByTheme(theme) {\n  return function (dispatch, getState) {\n    var state = getState();\n\n    if (state.themedQuotes && state.themedQuotes.text) {\n      return dispatch(fetchQuotes(theme, state.themedQuotes.text));\n    } else {\n      alert('Error: user has not entered any text!');\n    }\n  };\n} // This function is called when the web request finishes\n// We've defined the `json` parameter to be the response body\n\nexport function receiveQuotes(theme, json) {\n  return {\n    type: RECEIVE_QUOTES,\n    theme: theme,\n    quotes: json.quotes,\n    receivedAt: Date.now()\n  };\n}","map":{"version":3,"sources":["/home/nathanlee/Workspace/Litsearch (Nathan Lee_s Project)/Litsearch/frontend/src/redux/actions.js"],"names":["fetch","UPDATE_LIT_TEXT","RECEIVE_QUOTES","updateLitText","text","type","fetchQuotes","theme","url","payload","console","info","dispatch","method","headers","body","JSON","stringify","then","response","json","receiveQuotes","fetchQuotesByTheme","getState","state","themedQuotes","alert","quotes","receivedAt","Date","now"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,aAAlB;AACA,SAASC,eAAT,EAA0BC,cAA1B,QAAgD,eAAhD,C,CAEA;AACA;;AACA,OAAO,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAAAC,IAAI;AAAA,SAAK;AAClCC,IAAAA,IAAI,EAAEJ,eAD4B;AAElCG,IAAAA,IAAI,EAAJA;AAFkC,GAAL;AAAA,CAA1B,C,CAKP;AACA;;AACA,SAASE,WAAT,CAAqBC,KAArB,EAA4BH,IAA5B,EAAkC;AAC9B;AACA,MAAMI,GAAG,GAAG,wBAAZ;AACA,MAAMC,OAAO,GAAG;AAAEF,IAAAA,KAAK,EAALA,KAAF;AAASH,IAAAA,IAAI,EAAJA;AAAT,GAAhB;AAEAM,EAAAA,OAAO,CAACC,IAAR,CAAa,+CAAb;AACAD,EAAAA,OAAO,CAACC,IAAR,CAAaF,OAAb,EAN8B,CAQ9B;AACA;;AACA,SAAO,UAAAG,QAAQ,EAAI;AACf,WAAOZ,KAAK,CAACQ,GAAD,EAAM;AACdK,MAAAA,MAAM,EAAE,MADM;AAEdC,MAAAA,OAAO,EAAE;AACL,kBAAU,kBADL;AAEL,wBAAgB;AAFX,OAFK;AAMdC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeR,OAAf;AANQ,KAAN,CAAL,CAQNS,IARM,CAQD,UAAAC,QAAQ;AAAA,aAAIA,QAAQ,CAACC,IAAT,EAAJ;AAAA,KARP,EASNF,IATM,CASD,UAAAE,IAAI;AAAA,aAAIR,QAAQ,CAACS,aAAa,CAACd,KAAD,EAAQa,IAAR,CAAd,CAAZ;AAAA,KATH,CAAP;AAUH,GAXD;AAYH,C,CAED;;;AACA,OAAO,SAASE,kBAAT,CAA4Bf,KAA5B,EAAmC;AACtC,SAAO,UAACK,QAAD,EAAWW,QAAX,EAAwB;AAC3B,QAAMC,KAAK,GAAGD,QAAQ,EAAtB;;AACA,QAAIC,KAAK,CAACC,YAAN,IAAsBD,KAAK,CAACC,YAAN,CAAmBrB,IAA7C,EAAmD;AAC/C,aAAOQ,QAAQ,CAACN,WAAW,CAACC,KAAD,EAAQiB,KAAK,CAACC,YAAN,CAAmBrB,IAA3B,CAAZ,CAAf;AACH,KAFD,MAEO;AACHsB,MAAAA,KAAK,CAAC,uCAAD,CAAL;AACH;AACJ,GAPD;AAQH,C,CAED;AACA;;AACA,OAAO,SAASL,aAAT,CAAuBd,KAAvB,EAA8Ba,IAA9B,EAAoC;AACvC,SAAO;AACHf,IAAAA,IAAI,EAAEH,cADH;AAEHK,IAAAA,KAAK,EAALA,KAFG;AAGHoB,IAAAA,MAAM,EAAEP,IAAI,CAACO,MAHV;AAIHC,IAAAA,UAAU,EAAEC,IAAI,CAACC,GAAL;AAJT,GAAP;AAMH","sourcesContent":["import fetch from 'cross-fetch'\nimport { UPDATE_LIT_TEXT, RECEIVE_QUOTES } from './actionTypes';\n\n// This updates the literature text in state\n// It can be called everytime the user changes their input\nexport const updateLitText = text => ({\n    type: UPDATE_LIT_TEXT,\n    text,\n});\n\n// This is an internal function (not exported) called by `fetchQuotesByTheme`\n// It formats the input payload and actually makes the web request to the server\nfunction fetchQuotes(theme, text) {\n    // TODO: use a valid URL and JSON payload format\n    const url = 'http://127.0.0.1:5001/';\n    const payload = { theme, text };\n\n    console.info('Here is the payload being sent to the server:');\n    console.info(payload);\n\n    // Return function which issues a POST web request\n    // The server's response is passed over to `receiveQuotes` below\n    return dispatch => {\n        return fetch(url, {\n            method: \"post\",\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(payload)\n        })\n        .then(response => response.json())\n        .then(json => dispatch(receiveQuotes(theme, json)));\n    }\n}\n\n// This is the function called when the user clicks on a theme\nexport function fetchQuotesByTheme(theme) {\n    return (dispatch, getState) => {\n        const state = getState();\n        if (state.themedQuotes && state.themedQuotes.text) {\n            return dispatch(fetchQuotes(theme, state.themedQuotes.text));\n        } else {\n            alert('Error: user has not entered any text!');\n        }\n    };\n}\n\n// This function is called when the web request finishes\n// We've defined the `json` parameter to be the response body\nexport function receiveQuotes(theme, json) {\n    return {\n        type: RECEIVE_QUOTES,\n        theme,\n        quotes: json.quotes,\n        receivedAt: Date.now()\n    };\n}\n"]},"metadata":{},"sourceType":"module"}