{"ast":null,"code":"import _classCallCheck from \"/home/nathanlee/Workspace/Litsearch/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/nathanlee/Workspace/Litsearch/frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/nathanlee/Workspace/Litsearch/frontend/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/nathanlee/Workspace/Litsearch/frontend/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/nathanlee/Workspace/Litsearch/frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/nathanlee/Workspace/Litsearch/frontend/src/ThemeSelect.jsx\";\nimport React from 'react';\nimport { connect } from \"react-redux\";\nimport { fetchQuotesByTheme } from \"./redux/actions\";\nimport Dropdown from 'react-bootstrap/Dropdown';\nimport DropdownButton from 'react-bootstrap/DropdownButton';\n\nvar ThemeSelect =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(ThemeSelect, _React$Component);\n\n  function ThemeSelect() {\n    _classCallCheck(this, ThemeSelect);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(ThemeSelect).apply(this, arguments));\n  }\n\n  _createClass(ThemeSelect, [{\n    key: \"_renderDropdownItems\",\n    value: function _renderDropdownItems() {\n      var _this = this;\n\n      // TODO: get available themes from server\n      // This is your homework! :)\n      var THEMES = ['family', 'identity', 'love', 'women', 'power', 'language', 'religion', 'death', 'justice', 'class', 'storytelling', 'nature', 'racism', 'education', 'survival', 'freedom', 'memory', 'coming of age', 'morality', 'war', 'fate', 'gender roles', 'growing up', 'time', 'isolation', 'guilt', 'christianity', 'friendship', 'marriage', 'community', 'tradition', 'home', 'appearances', 'heroism', 'fate and free will', 'america', 'work', 'redemption', 'perspective', 'resistance', 'corruption', 'duality', 'secrecy', 'art'];\n      return THEMES.map(function (theme) {\n        // For each possible theme, we're creating an anonymous function which\n        // fetches quotes from the server when clicked\n        // It's not the most performant solution but it's good enough for now\n        var onClick = function onClick() {\n          return _this.props.dispatch(fetchQuotesByTheme(theme));\n        };\n\n        return React.createElement(Dropdown.Item, {\n          key: theme,\n          onClick: onClick,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 30\n          },\n          __self: this\n        }, theme);\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"theme-select\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39\n        },\n        __self: this\n      }, React.createElement(DropdownButton, {\n        id: \"theme-select-dropdown\",\n        title: \"Pick a theme...\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40\n        },\n        __self: this\n      }, this._renderDropdownItems()));\n    }\n  }]);\n\n  return ThemeSelect;\n}(React.Component);\n\nexport default connect(null, {\n  fetchQuotesByTheme: fetchQuotesByTheme\n})(ThemeSelect);","map":{"version":3,"sources":["/home/nathanlee/Workspace/Litsearch/frontend/src/ThemeSelect.jsx"],"names":["React","connect","fetchQuotesByTheme","Dropdown","DropdownButton","ThemeSelect","THEMES","map","theme","onClick","props","dispatch","_renderDropdownItems","Component"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,kBAAT,QAAmC,iBAAnC;AAEA,OAAOC,QAAP,MAAqB,0BAArB;AACA,OAAOC,cAAP,MAA2B,gCAA3B;;IAGMC,W;;;;;;;;;;;;;2CAEqB;AAAA;;AACnB;AACA;AACA,UAAMC,MAAM,GAAG,CACb,QADa,EACH,UADG,EACS,MADT,EACiB,OADjB,EAC0B,OAD1B,EACmC,UADnC,EAC+C,UAD/C,EAElB,OAFkB,EAET,SAFS,EAEE,OAFF,EAEW,cAFX,EAE2B,QAF3B,EAEqC,QAFrC,EAGlB,WAHkB,EAGL,UAHK,EAGO,SAHP,EAGkB,QAHlB,EAG4B,eAH5B,EAIlB,UAJkB,EAIN,KAJM,EAIC,MAJD,EAIS,cAJT,EAIyB,YAJzB,EAIuC,MAJvC,EAKlB,WALkB,EAKL,OALK,EAKI,cALJ,EAKoB,YALpB,EAKkC,UALlC,EAMlB,WANkB,EAML,WANK,EAMQ,MANR,EAMgB,aANhB,EAM+B,SAN/B,EAOlB,oBAPkB,EAOI,SAPJ,EAOe,MAPf,EAOuB,YAPvB,EAOqC,aAPrC,EAQlB,YARkB,EAQJ,YARI,EAQU,SARV,EAQqB,SARrB,EAQgC,KARhC,CAAf;AAUA,aAAOA,MAAM,CAACC,GAAP,CAAW,UAAAC,KAAK,EAAI;AACvB;AACA;AACA;AACA,YAAMC,OAAO,GAAG,SAAVA,OAAU;AAAA,iBAAM,KAAI,CAACC,KAAL,CAAWC,QAAX,CAAoBT,kBAAkB,CAACM,KAAD,CAAtC,CAAN;AAAA,SAAhB;;AACA,eACI,oBAAC,QAAD,CAAU,IAAV;AAAe,UAAA,GAAG,EAAEA,KAApB;AAA2B,UAAA,OAAO,EAAEC,OAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACKD,KADL,CADJ;AAKH,OAVM,CAAP;AAWH;;;6BAEQ;AACL,aACI;AAAK,QAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,cAAD;AAAgB,QAAA,EAAE,EAAC,uBAAnB;AAA2C,QAAA,KAAK,EAAC,iBAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACK,KAAKI,oBAAL,EADL,CADJ,CADJ;AAOH;;;;EApCqBZ,KAAK,CAACa,S;;AAwChC,eAAeZ,OAAO,CACpB,IADoB,EAEpB;AAAEC,EAAAA,kBAAkB,EAAlBA;AAAF,CAFoB,CAAP,CAGbG,WAHa,CAAf","sourcesContent":["import React from 'react';\nimport { connect } from \"react-redux\";\nimport { fetchQuotesByTheme } from \"./redux/actions\";\n\nimport Dropdown from 'react-bootstrap/Dropdown';\nimport DropdownButton from 'react-bootstrap/DropdownButton';\n\n\nclass ThemeSelect extends React.Component {\n\n    _renderDropdownItems() {\n        // TODO: get available themes from server\n        // This is your homework! :)\n        const THEMES = [\n          'family', 'identity', 'love', 'women', 'power', 'language', 'religion',\n     'death', 'justice', 'class', 'storytelling', 'nature', 'racism',\n     'education', 'survival', 'freedom', 'memory', 'coming of age',\n     'morality', 'war', 'fate', 'gender roles', 'growing up', 'time',\n     'isolation', 'guilt', 'christianity', 'friendship', 'marriage',\n     'community', 'tradition', 'home', 'appearances', 'heroism',\n     'fate and free will', 'america', 'work', 'redemption', 'perspective',\n     'resistance', 'corruption', 'duality', 'secrecy', 'art'\n        ];\n        return THEMES.map(theme => {\n            // For each possible theme, we're creating an anonymous function which\n            // fetches quotes from the server when clicked\n            // It's not the most performant solution but it's good enough for now\n            const onClick = () => this.props.dispatch(fetchQuotesByTheme(theme));\n            return (\n                <Dropdown.Item key={theme} onClick={onClick}>\n                    {theme}\n                </Dropdown.Item>\n            );\n        });\n    }\n\n    render() {\n        return (\n            <div className=\"theme-select\">\n                <DropdownButton id=\"theme-select-dropdown\" title=\"Pick a theme...\">\n                    {this._renderDropdownItems()}\n                </DropdownButton>\n            </div>\n        );\n    }\n\n}\n\nexport default connect(\n  null,\n  { fetchQuotesByTheme }\n)(ThemeSelect);\n"]},"metadata":{},"sourceType":"module"}