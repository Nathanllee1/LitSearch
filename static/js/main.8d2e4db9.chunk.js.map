{"version":3,"sources":["redux/actionTypes.js","redux/reducers/themedQuotes.js","redux/reducers/index.js","redux/store.js","redux/actions.js","LitTextBox.jsx","LeftContainer.jsx","ThemeSelect.jsx","RightContainer.jsx","LitSearchPage.jsx","NewApp.jsx","index.js"],"names":["RECEIVE_QUOTES","initialState","text","quotes","combineReducers","themedQuotes","state","arguments","length","undefined","action","type","console","log","concat","Object","objectSpread","info","loggerMiddleware","createLogger","fetchQuotes","theme","payload","dispatch","fetch","proxyurl","method","headers","Accept","Content-Type","body","JSON","stringify","then","response","json","receivedAt","Date","now","receiveQuotes","fetchQuotesByTheme","getState","alert","LitTextBox","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","bind","assertThisInitialized","value","updateLitText","react_default","a","createElement","className","lib_default","onChange","React","Component","connect","LeftContainer","src_LitTextBox","ThemeSelect","map","Dropdown_default","Item","key","onClick","DropdownButton_default","id","title","_renderDropdownItems","RightContainer","quote","src_ThemeSelect","_renderQuotes","LitSearchPage","src_LeftContainer","src_RightContainer","NewApp","src_LitSearchPage_0","preloadedState","ReactDOM","render","es","store","createStore","rootReducer","applyMiddleware","thunkMiddleware","src_NewApp","document","getElementById"],"mappings":"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","file":"static/js/main.8d2e4db9.chunk.js","sourcesContent":["export const UPDATE_LIT_TEXT = \"UPDATE_LIT_TEXT\";\nexport const RECEIVE_QUOTES = \"RECEIVE_QUOTES\";\n","import { UPDATE_LIT_TEXT, RECEIVE_QUOTES } from \"../actionTypes\";\n\n// This is the initial state in our app\n// There are no quotes loaded from the server yet\nconst initialState = {\n    text: \"\",\n    quotes: [],\n};\n\nexport default function(state = initialState, action) {\n    switch (action.type) {\n\n        // For this action, set the user's text to state\n        case UPDATE_LIT_TEXT: {\n            const text = action.text;\n            console.log(`You typed something. This text has been set to state: ${text}`);\n            return {\n                ...state,\n                text\n            };\n        }\n\n        // For this action, set the web response's quotes to state\n        case RECEIVE_QUOTES: {\n            const quotes = action.quotes;\n            console.info(`We just received this from the server: ${quotes}`);\n            return {\n                ...state,\n                quotes\n            };\n        }\n\n        default:\n            return state;\n    }\n}\n","import { combineReducers } from 'redux';\nimport themedQuotes from './themedQuotes';\n\n// This is used for combining multiple reducers\n// We currently only use one here (themedQuotes)\n// But we could add more in the future like: combineReducers({ themedQuotes, otherReducer })\nexport default combineReducers({ themedQuotes });\n","import { createStore, applyMiddleware } from 'redux';\nimport thunkMiddleware from 'redux-thunk';\nimport { createLogger } from 'redux-logger';\nimport rootReducer from './reducers';\n\nconst loggerMiddleware = createLogger();\n\nexport default function configureStore(preloadedState) {\n    return createStore(\n        rootReducer,\n        preloadedState,\n        applyMiddleware(thunkMiddleware, loggerMiddleware)\n    );\n};\n","import fetch from 'cross-fetch'\nimport { UPDATE_LIT_TEXT, RECEIVE_QUOTES } from './actionTypes';\n\n// This updates the literature text in state\n// It can be called everytime the user changes their input\nexport const updateLitText = text => ({\n    type: UPDATE_LIT_TEXT,\n    text,\n});\n\n// This is an internal function (not exported) called by `fetchQuotesByTheme`\n// It formats the input payload and actually makes the web request to the server\nfunction fetchQuotes(theme, text) {\n    // TODO: use a valid URL and JSON payload format\n    const proxyurl = \"https://cors-anywhere.herokuapp.com/\";\n    const url = 'http://127.0.0.1:5001/';\n    const payload = { theme, text };\n\n    console.info('Here is the payload being sent to the server:');\n    console.info(payload);\n\n    // Return function which issues a POST web request\n    // The server's response is passed over to `receiveQuotes` below\n    return dispatch => {\n        return fetch((proxyurl + url), {\n            method: \"post\",\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(payload)\n        })\n        .then(response => response.json())\n        .then(json => dispatch(receiveQuotes(theme, json)));\n    }\n}\n\n// This is the function called when the user clicks on a theme\nexport function fetchQuotesByTheme(theme) {\n    return (dispatch, getState) => {\n        const state = getState();\n        if (state.themedQuotes && state.themedQuotes.text) {\n            return dispatch(fetchQuotes(theme, state.themedQuotes.text));\n        } else {\n            alert('Error: user has not entered any text!');\n        }\n    };\n}\n\n// This function is called when the web request finishes\n// We've defined the `json` parameter to be the response body\nexport function receiveQuotes(theme, json) {\n    return {\n        type: RECEIVE_QUOTES,\n        theme,\n        quotes: json.quotes,\n        receivedAt: Date.now()\n    };\n}\n","import React from 'react';\nimport { connect } from \"react-redux\";\n\nimport ReactQuill from 'react-quill';\nimport 'react-quill/dist/quill.snow.css';\n\nimport { updateLitText } from \"./redux/actions\";\n\nclass LitTextBox extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    // This fires an action to update the text value in our store's state\n    handleChange(value) {\n        this.props.updateLitText(value);\n    }\n\n    render() {\n        return (\n            <div className='lit-text-box'>\n                <ReactQuill value=\"\" onChange={this.handleChange} />\n            </div>\n        );\n    }\n\n}\n\nexport default connect(\n  null,\n  { updateLitText }\n)(LitTextBox);\n","import React from 'react';\nimport LitTextBox from './LitTextBox';\n\nclass LeftContainer extends React.Component {\n\n    render() {\n        return (\n            <div className='left-container'>\n                <LitTextBox />\n            </div>\n        );\n    }\n\n}\n\nexport default LeftContainer;\n","import React from 'react';\nimport { connect } from \"react-redux\";\nimport { fetchQuotesByTheme } from \"./redux/actions\";\n\nimport Dropdown from 'react-bootstrap/Dropdown';\nimport DropdownButton from 'react-bootstrap/DropdownButton';\n\n\nclass ThemeSelect extends React.Component {\n\n    _renderDropdownItems() {\n        // TODO: get available themes from server\n        // This is your homework! :)\n        const THEMES = [\n          'family', 'identity', 'love', 'women', 'power', 'language', 'religion',\n     'death', 'justice', 'class', 'storytelling', 'nature', 'racism',\n     'education', 'survival', 'freedom', 'memory', 'coming of age',\n     'morality', 'war', 'fate', 'gender roles', 'growing up', 'time',\n     'isolation', 'guilt', 'christianity', 'friendship', 'marriage',\n     'community', 'tradition', 'home', 'appearances', 'heroism',\n     'fate and free will', 'america', 'work', 'redemption', 'perspective',\n     'resistance', 'corruption', 'duality', 'secrecy', 'art'\n        ];\n        return THEMES.map(theme => {\n            // For each possible theme, we're creating an anonymous function which\n            // fetches quotes from the server when clicked\n            // It's not the most performant solution but it's good enough for now\n            const onClick = () => this.props.dispatch(fetchQuotesByTheme(theme));\n            return (\n                <Dropdown.Item key={theme} onClick={onClick}>\n                    {theme}\n                </Dropdown.Item>\n            );\n        });\n    }\n\n    render() {\n        return (\n            <div className=\"theme-select\">\n                <DropdownButton id=\"theme-select-dropdown\" title=\"Pick a theme...\">\n                    {this._renderDropdownItems()}\n                </DropdownButton>\n            </div>\n        );\n    }\n\n}\n\nexport default connect(\n  null,\n  { fetchQuotesByTheme }\n)(ThemeSelect);\n","import React from 'react';\nimport ThemeSelect from './ThemeSelect';\n\nclass RightContainer extends React.Component {\n\n    _renderQuotes() {\n        const quotes = this.props.quotes || [];\n\n        // If there's at least one quote, render a \"Quotes:\" header\n        // For each quote, we're rendering it as a list item\n        // TODO: instead of rendering a list item, render a custom card component\n        // This is your homework! :)\n        return (\n            <div className='themed-quotes'>\n                {quotes.length > 0 ? <h2>Quotes:</h2> : null}\n                <ul>\n                    {quotes.map(quote => <li key={quote}>{quote}</li>)}\n                </ul>\n            </div>\n        );\n    }\n\n    render() {\n        return (\n            <div className='right-container'>\n                <ThemeSelect dispatch={this.props.dispatch} />\n                <hr />\n                {this._renderQuotes()}\n            </div>\n        );\n    }\n\n}\n\nexport default RightContainer;\n","import React from 'react';\nimport LeftContainer from \"./LeftContainer\";\nimport RightContainer from \"./RightContainer\";\n\nimport \"./LitSearchPage.css\";\n\nclass LitSearchPage extends React.Component {\n\n    render() {\n        return (\n            <div className='lit-search-page'>\n                <LeftContainer />\n                <RightContainer\n                    quotes={this.props.quotes}\n                    dispatch={this.props.dispatch}\n                />\n            </div>\n        );\n    }\n\n}\n\nexport default LitSearchPage;\n","import React from 'react';\nimport PropTypes from 'prop-types'\nimport { connect } from \"react-redux\";\n\nimport LitSearchPage from \"./LitSearchPage\";\n\nclass NewApp extends React.Component {\n\n    render() {\n        return (\n            <LitSearchPage\n                quotes={this.props.quotes}\n                dispatch={this.props.dispatch}\n            />\n        );\n    }\n\n}\n\n// Here, we're defining what props we expect to receive from the store\n// We're getting dispatch for free from the middleware (see store.js and index.js)\n// As for the quotes object, that is being taken from `themedQuotes` via the map function below\nNewApp.propTypes = {\n    quotes: PropTypes.array.isRequired,\n    dispatch: PropTypes.func.isRequired\n};\n\n// Here's the function we talked about which maps state from the store to props given to this component\n// We're basically extracting the store's stateful quotes so they can be passed down to components and rendered\nfunction mapStateToProps(state) {\n    return {\n        quotes: state.themedQuotes.quotes,\n    };\n}\n\nexport default connect(mapStateToProps)(NewApp)\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { Provider } from 'react-redux'\nimport store from \"./redux/store\";\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport NewApp from './NewApp';\n\nReactDOM.render(\n    <Provider store={store()}>\n        <NewApp />\n    </Provider>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}